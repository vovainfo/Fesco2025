#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных
#КонецОбласти

#Область ПрограммныйИнтерфейс
#КонецОбласти

#Область ОбработчикиСобытий
Процедура ОбработкаПроведения(Отказ, Режим)
	ПровестиПоОстаткам(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	УстановитьБлокировкуРасчетов();

	Если ПроверкаПоРасчетам() Тогда
		ПровестиПоРасчетам();
	Иначе
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Код процедур и функций

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Проводит документ по остаткам и проверяет наличие достаточного количества товаров на складе.
//
// Параметры:
//   Отказ - Булево - Признак отказа от проведения документа при нехватке товаров
Процедура ПровестиПоОстаткам(Отказ)
    Запрос = Новый Запрос;
    Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

    Запрос.Текст =
		"ВЫБРАТЬ
		|	РасходнаяНакладнаяТовары.Номенклатура КАК Номенклатура,
		|	СУММА(РасходнаяНакладнаяТовары.Количество) КАК Количество,
		|	МИНИМУМ(РасходнаяНакладнаяТовары.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ ТоварыДокумента
		|ИЗ
		|	Документ.РасходнаяНакладная.Товары КАК РасходнаяНакладнаяТовары
		|ГДЕ
		|	РасходнаяНакладнаяТовары.Ссылка = &Ссылка
		|СГРУППИРОВАТЬ ПО
		|	РасходнаяНакладнаяТовары.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&Склад КАК Склад,
		|	&Дата КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	ТоварыДокумента.Номенклатура КАК Номенклатура,
		|	ТоварыДокумента.Количество КАК Количество
		|ИЗ
		|	ТоварыДокумента КАК ТоварыДокумента";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Склад", Склад);
	РезультатЗапроса = Запрос.Выполнить();

	Движения.Остатки.Загрузить(РезультатЗапроса.Выгрузить());
	
	Движения.Остатки.БлокироватьДляИзменения = Истина;
	Движения.Остатки.Записывать = Истина;
	Движения.Записать();

	// Контроль остатков
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТоварыДокумента.НомерСтроки КАК НомерСтроки,
		|	ТоварыДокумента.Номенклатура.Наименование КАК НоменклатураНаименование,
		|	-ОстаткиОстатки.КоличествоОстаток КАК Дефицит
		|ИЗ
		|	ТоварыДокумента КАК ТоварыДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Остатки.Остатки(&МоментВремени, Номенклатура В
		|			(ВЫБРАТЬ
		|				ТоварыДокумента.Номенклатура КАК Номенклатура
		|			ИЗ
		|				ТоварыДокумента КАК ТоварыДокумента)
		|		И Склад = &Склад) КАК ОстаткиОстатки
		|		ПО ТоварыДокумента.Номенклатура = ОстаткиОстатки.Номенклатура
		|ГДЕ
		|	ОстаткиОстатки.КоличествоОстаток < 0";

	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(МоментВремени(), ВидГраницы.Включая));
	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		Отказ = Истина;
		ВыборкаОшибки = РезультатЗапроса.Выбрать();
		Пока ВыборкаОшибки.Следующий() Цикл
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон("Недостаточно товара <%1> в количестве: %2", 
						ВыборкаОшибки.НоменклатураНаименование, ВыборкаОшибки.Дефицит);
			Сообщение.Поле = СтрШаблон("Товары[%1].Количество", ВыборкаОшибки.НомерСтроки-1);
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Проверяет возможность проведения расходной накладной исходя из кредитного лимита контрагента.
//
// Возвращаемое значение:
//   Булево - Истина, если проведение расходной накладной не нарушает кредитный лимит, иначе Ложь
Функция ПроверкаПоРасчетам()
	Движения.РасчетыСКлиентами.Записать();
	
	// При наличии БСП использовал бы ЗначенияРеквизитовОбъекта, но т.к. БСП нет и объект 
	// Контрагент маленький, без ТЧ, то можно и так.
	//@skip-check reading-attribute-from-database
	КредитныйЛимитСумма = Контрагент.КредитныйЛимитСумма;
	//@skip-check reading-attribute-from-database
	КредитныйЛимитПериод = Контрагент.КредитныйЛимитПериод;
	
	Если КредитныйЛимитСумма = 0 ИЛИ КредитныйЛимитПериод = 0 Тогда // Кредит недоступен, просто проверяем баланс 
		Баланс = РегистрыНакопления.РасчетыСКлиентами.Остатки(
														МоментВремени(), 
														Новый Структура("Контрагент", Контрагент),
														"Контрагент",
														"Сумма"
													)[0].Сумма;
		Возврат (Баланс >= Сумма); 
	КонецЕсли;

	// Доступен кредит. алгоритм сложнее.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетыСКлиентамиОстаткиИОбороты.СуммаНачальныйОстаток КАК СуммаНачальныйОстаток,
		|	РасчетыСКлиентамиОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
		|	РасчетыСКлиентамиОстаткиИОбороты.СуммаПриход КАК СуммаПриход
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(&НачалоПериода, &КонецПериода,,,
		|		Контрагент = &Контрагент) КАК РасчетыСКлиентамиОстаткиИОбороты";
		
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("НачалоПериода", КонецДня(Дата - 24*3600*КредитныйЛимитПериод));
	Запрос.УстановитьПараметр("КонецПериода", МоментВремени());
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Если Выборка.СуммаКонечныйОстаток >= Сумма Тогда 
		Возврат Истина; // кредитный лимит не нужен
	ИначеЕсли Выборка.СуммаКонечныйОстаток + КредитныйЛимитСумма < Сумма  Тогда 
		Возврат Ложь; // денег не хватает даже с учетом КЛ
	ИначеЕсли Выборка.СуммаНачальныйОстаток >= 0 Тогда 
		Возврат Истина; // N дней тому назад не было минуса, т.е. просрочки нет
	ИначеЕсли Выборка.СуммаНачальныйОстаток + Выборка.СуммаПриход >= 0 Тогда 
		Возврат Истина; // на начало периода был минус, но мы его погасили полностью.
	КонецЕсли;
	Возврат Ложь; // На начало периода был минус и мы его не погасили платежами
КонецФункции

// Устанавливает блокировку данных регистра накопления "РасчетыСКлиентами" для контрагента.
//
Процедура УстановитьБлокировкуРасчетов()
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСКлиентами");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Контрагент", Контрагент);
	//@skip-check lock-out-of-try
	Блокировка.Заблокировать();
КонецПроцедуры


// Проводит документ по расчетам с клиентами, создавая движение по регистру "Расчеты с клиентами".
//
Процедура ПровестиПоРасчетам()
	Движения.РасчетыСКлиентами.Записывать = Истина;
	Движение = Движения.РасчетыСКлиентами.ДобавитьРасход();
	Движение.Период = Дата;
	Движение.Контрагент = Контрагент;
	Движение.Сумма = Сумма;
КонецПроцедуры
#КонецОбласти

#Область Инициализация
#КонецОбласти

#КонецЕсли
